

* multichannel
** TODO multimedia panel - drop down to choose which chat panel to display
** each chat is a tab in the carousel
** add a channel is
*** /join #channelname
*** is the channel private?
**** /mode #channelname +s  - makes secret
**** /mode #channelname +i  - makes invite only
**** /invite nickname #channelname
*** private channels don't appear
*** other channels appear on the list
** web ui
*** irc side
**** do a /list
**** shoes must store /list results
2012-11-10 17:53:50:463782000 *** 322 #team 5
2012-11-10 17:53:50:491303000 *** 322 &SERVER 0 Server Messages
2012-11-10 17:53:50:518790000 *** 323 End of LIST
**** shoes must store /invite results
2012-11-10 17:53:55:675583000 *** nicferrier INVITE CarolineTF                                                                                         
                                                    #management
**** irc responses to /list
proc po1-irc.ferrier.me.uk cmd 321 sender test.me args (nicferrier Channel Users  Name) text :test.me 321 nicferrier Channel :Users  Name
proc po1-irc.ferrier.me.uk cmd 322 sender test.me args (nicferrier #thoughtworks 12) text :test.me 322 nicferrier #thoughtworks 12 :
proc po1-irc.ferrier.me.uk cmd 323 sender test.me args (nicferrier End of /LIST) text :test.me 323 nicferrier :End of /LIST

*** web side
**** present the shoes stored channel lists
** shoes channel data structure
*** channel name
*** invite status

* blog post
** snow flakes in all the forms
*** my vagrant vms became snowflakes
*** part of the battle is to constantly be aware of your architecture

* IRC access
** ssh on auth key
** command option on auth entry can control what command we actually run
*** commands could be
**** irc - to connect irc?
***** this needs to write which auth key is being used
****** so the bouncer auth can read it
****** something like:
command="bash /home/nferrier/testssh nic" ssh-dss AAAAB3... special/nferrier@nferrier
****** and testssh looks like
mkdir -p /tmp/pid
echo $1 >> /tmp/pid/$PPID
$SSH_ORIGINAL_COMMAND
****** this associates username "nic" with the PID of the SSH
***** bouncer auth works like this
****** bouncer reads the client end of the socket
****** client end of the socket is server end of the ssh socket
****** client end of the ssh socket find the PID/AUTH file we just wrote
******* with the testssh script above
****** we can syntax check the real command as well
**** logs - to pull your logs?
**** control - to send messages to erwin

* todo
** TODO ui for video pickup
*** when the video comes in
**** popup an accept ui
**** play a sound
*** if you click accept the flash opens
** TODO move all the thoughtworkers to new site
*** pick up the old db and move the users to the new site
*** take out the rcirc-ssh dependancies from talkapp-rcirc-connect
** TODO check vhosting
*** TODO provision some irc servers
**** DONE thoughtworks
***** think they're mapped to irc.jbx.cc right now
**** DONE team
**** TODO hn
*** DONE add in css variable for different vhosts?
*** DONE add thoughtworks
*** DONE add css to hn
**** DONE db change
**** DONE new css file
**** DONE add to recipe
*** DONE add teamtw
**** DONE db-change to add new org
**** DONE db-change to move everyone's organization
**** DONE add an alias to the nginx
*** DONE add team (team.teamchat.net)
**** DONE add org record
**** for caroline, me and hoxty
**** DONE provision ircd
** TODO when the bouncer is down and the user hits /user/chat it errors
*** we should redirect to the /user/ page
** TODO static links
*** about
*** press and blogs
*** contact
*** developers
*** api
*** github
** TODO automate irc start
*** TODO template the ngirc config
ngircd -f ngircd-configs/team.teamchat.net.conf -n
** TODO why are users not going offline?
** TODO alter blog post
*** - quote from Github/Jesse via Jim
**** "we're all pairing all the time"
*** also add to "who are we up against"
**** your team's default chat system
***** we don't really want to supplant this
***** we want to make it easier
*** for developers
**** writing chat bots
***** HTTP API to send chat via a robot
***** IRC API to let a robot be given commands
**** the whole project is open source
***** you could build your own if you want to
***** but we want to do that bit for you and save you the time and money
** DONE cough - when it's your user don't cough - ever
** TODO puppetize postfix - need the config file
** TODO when you see the user page for the 1st time you need feedback it's connecting
*** it needs to say "we are connecting you to irc..."
*** dialog box?
** DONE favicon.ico!
** TODO the owner of the page gravatar has lower left rendering?
*** elke's bug report
** DONE make gravatar open a new page
** DONE plugin wowza from zaargy
stilliremain.dyndns.org:1935
** DONE auth bug                                                    :rollout:
*** TODO FIX elnode documentation for auth stuff
**** actually I am not sure the current auth system is ok
*** the fix
**** I've marked in elnode where to update
***** the test function could abstract away the db?
***** IF the test function is constructed when the db tis in scope
****** it could just wrap the whole db test
***** the default test function could be constructed fairly early and passed down.
**** maybe it's time to add the extra stuff to auth
**** is there a hack?
** DONE for footer
*** FAQ
**** what is it?
**** why do I need that?
**** why do I really need that?
**** is it secure?
** DONE detect end of video                                           :video:
** DONE have the sender and reciever always be the same window        :video:
*** so the sender is always panel 0
*** so if you send a call or take a call you're in different slots
**** but they are consistent for the conversation
** TODO when you pick up a video mark the user offline for video      :video:
** DONE make a webserver for the js and all that
** DONE online handling
*** the comet-fail-hook is called on close as well as fail
*** the close causes someone who is just online to go offline
** TODO make a dummy web only reg hack                                 :test:
*** so you can do a reg without creating the irc user
** DONE rename everything to teamchat.net                           :rollout:
** DONE config create bug
*** zaargy experienced this
*** the config does not create the user
*** log
**** fixed the ircdprovision script to do logging for every provision
*** DONE need a file test for the key in ircdkeys
**** to test whether to do that or not
** DONE ircdprovisioner script works                                  :multi:
*** it does but it needs alteration
**** the ircd host is hardcoded
*** TODO looks like we need to make it more complicated because we need to start ircd's
** TODO status messages don't get picked up by the list-since
*** things like joins and parts - these would be useful?
**** I think so.
*** also /me messages
** DONE user connects to the bouncer
*** does the provisioner need to make a user on the bouncer?
**** how will the users connect to the bouncer?
***** could they connect as emacs@bouncer (or whatever)?
****** don't think so. the ssh is the auth.
** TODO erwin
*** we need to auto-install erwin for each
**** irc server
**** channel
** DONE email sending                                               :go:live:
*** send an email with the link in it
*** from ferrier.me.uk right now?
** TODO when the irc connection dies                                :go:live:
*** restart?
*** kill the buffer?
** TODO on reboot
*** cycle through the users in the db making their shoes off sessions
** DONE the comet queue isn't turned on
*** fixed by talkapp-start
** TODO auto start talk app
** DONE make elnode access log configurable?
*** I'd like to report cookies for example
** DONE get wowza server into the code
** DONE twitter/bootstrap
*** which needs elpakit for testing
**** eval all the elisp files specified in the kit
*** DONE design - split screen for chat
** DONE reg changes for email
*** reg login changes
**** you now only get the send reg page
**** another handler provides the full login
**** send the link to the handler
** DONE database adapters
*** DONE make a function to pick up shoes-config from the talk database
*** DONE make shoes-off use the new function
** DONE fix rcirc-ssh so that it can just be used instead of rcirc?
*** rcirc-ssh won't work for multiple users?
*** so make it so that it doesn't always patch itself in
*** DONE but can be used directly with a key
** DONE rcirc multiple users
*** DONE each rcirc buffer needs to be identified by user
**** DONE we just need to try changing the pattern used and seeing if there is a problem
***** fire up the spikyircd
***** open up the irc port?
****** or put emacs inside it
***** fire up emacs -Q and use rcirc a couple of times with different users
**** DONE talk-rcirc-connect now makes sure that functions are named properly
** TODO allow app to be configured somehow
*** the variables that need to change
**** the talkapp/irc vars
***** hostname
****** also needs to change in puppet?
***** channel
** DONE on reg
*** establish the shoes-off connection
** write scripts
*** DONE install package script
*** TODO puppetize ssh host keys
*** TODO start/stop shoes-off per user
**** this can just be shoes-off-start-session / shoes-off-stop-session
**** for rcirc history webapp to work we also you need
(setq rcirc-time-format "%H:%M:%S:%N")
***** not sure what should set this
*** DONE add user to shoes-off?
**** this is just adding config
**** DONE JUST USE THE DATABASE
*** DONE ircd add user script
**** when you reg a user we need to
***** make a new private key from bouncer->ircd
***** ssh to the ircd and add the user and the key
**** do this with new handler /init/


* jobs if we're a business
** split open the talkapp
*** the wiki files need to be one app
**** preferably a wiki with hidden login
*** the reg app another app
*** the chat app another app
*** the reg app and the chat app need to share a db
** make the VM totally installable
*** add 

* bare metal install
** emacs-local/bin/emacs --daemon=teamchat.net -l .emacs.d.teamchat/init.el

* tests todo
** mock rcirc stuff properly
*** like talkapp/rcirc-send
** talkapp/save-reg

* support irc client
** add the package irssi
** provision users on the bouncer
*** make the user's shell /usr/bin/irssi
*** add home/.ssh
*** put the user's key in home/.ssh/authorized_keys
*** add home/.irssi
*** put the irssi config from SpikyIRC into the user dir home/.irssi/config
**** that's a template
**** so needs to be resolved

* wowza install
** you install wowza
** you patch the start script:
diff -u -L /sudo\:root\@localhost\:/usr/local/WowzaMediaServer/bin/startup.sh\~ -L /sudo\:root\@localhost\:/usr/local/WowzaMediaServer/bin/startup.sh /tmp/tramp.3159zMV.sh /tmp/tramp.3159AXb.sh
--- /sudo:root@localhost:/usr/local/WowzaMediaServer/bin/startup.sh~
+++ /sudo:root@localhost:/usr/local/WowzaMediaServer/bin/startup.sh
@@ -1,5 +1,5 @@
 #!/bin/sh
-. ./setenv.sh
+. `dirname $0`/setenv.sh
 
 #chmod 600 ../conf/jmxremote.password
 #chmod 600 ../conf/jmxremote.access
** and then you need to do this
sudo mkdir -p /usr/local/WowzaMediaServer/applications/vidclient
sudo mkdir -p /usr/local/WowzaMediaServer/conf/vidclient
sudo cp vidclient/Application.xml /usr/local/WowzaMediaServer/conf/vidclient
** and then start wowza

* maintenance
** how to refresh a file from the cache
sudo grep -lr "/-/site.js" /var/cache/nginx/ | xargs -L1 sudo rm -f
** userdel on the ircd
( ps aux | awk '$1 ~ /nic/ {print$2}' \
 | while read pid ; do kill -9 $pid ; done ) ; \ |
  /usr/sbin/userdel nic ; rm -rf /home/nic


* bluesky
** erwin should do the history?
*** like
**** limit each user to a small rcirc buffer
**** have erwin keep a very long buffer
**** have each user just ask erwin for the history
*** PROBLEMS with this
**** what if you have multiple bouncers for a team?
***** erwin won't be loaded on all the bouncers will he?
***** possible solution
****** elect one person from each bouncer to have full history
******* it's more complex than that
******** what if that person wasn't wanted in a channel that you want logged?
******** you need per-channel buffer sizes?
********* then you could store which person was authoritative history for which channel
*** alternate history solution
**** use an rcirc hook to send data back to the webapp directly
**** have the hook keep one single log that everyone pulls from
** bot control from the webapp
*** what is your bots name?
*** what things can your bot do?
**** checklist
***** insult
***** doc
***** etc...
** password change - kinda priority actually
** people come online their gravatar should appear
** make the gravatar wobble when they chat
** configurable services
*** gravatar should be turn off/on-able
*** colors, name, etc... should all be controllable

* multi hosting
** registration
*** user registers with an email
**** user confirms their email
***** we throw them in their room
*** user comes to a branded site
**** can use any email
**** we just throw them in that way
** questions
*** where do we store email?
*** how to create a room when someone registers?
**** when someone confirms an email make a channel with that
** DONE use the org record to find the user's channel
** DONE we must have an organization attached to each record
*** when you register
**** look at the host name
***** is it in the org-db?
***** if not look at the email domain
****** is it in the org-db?
***** if not we have a new org
*** dbs needed
**** DONE org-db
***** hostname for the teamchat service
****** match the http_host against this variable
******* we can auto-bind a user to a service then
****** this is very unsafe!!!
***** org name
***** domain name
****** match email addresses to this to find the org
***** irc server name
***** primary channel
** how do we key in their dns?
*** people will want chat.mycompany.com
    

* ssh-key less version
** DONE remove the key
** DONE make talkapp-provision-irc t in the customize

* initial rollout notes
** DONE elnode access logs have unnecessary whitespace lines
** nginx install
*** PPA here
*** http://wiki.nginx.org/Install#Ubuntu_PPA
** DONE nginx needs tuning
*** DONE set the poll proxying to be long running
*** DONE cache everything else
** DONE the double layer auth isn't working?
*** seems like people can only auth to 1 at a time
**** except me, which is wierd
*** can we make a test
** DONE the connect to irc button isn't connected to anything
*** jquery fail
** it's a pain assembling everything
*** need a rakefile to pull all the git depends
*** could we make an output for the rakefile to deal with elpakit?
** the emacsd didn't start on boot
* initial provision check list
** DONE bouncer box installs
** DONE emacs installs on box
** DONE apps install on emacs
** TODO talkapp starts
*** this is what needs to be done from the command line
sudo /etc/init.d/emacs command elnode-start "(quote talk-router)" :port 8001 :host '"0.0.0.0"'
** DONE the /config/ url works
** DONE multiple named ssh bouncer sessions connect
*** DONE talkapp needs ssh sessions turned on by default
** DONE starting the shoes-off session
*** this:
**** (shoes-off-start-session username)
*** have a session handler that deals with a user's sessions?
** TODO the bouncer server starts
* DONE how does the reg process start the bouncer session for the user?
** at the end of the shell script?
* initial elpa package list
** shoes-off
** rcirc-ssh-sessions
** talk
* initial design of talk app
** register users with keys
** take
*** username
**** irc username to connect as
*** password
**** irc password to connect with
*** key
**** ssh key to use
*** email
**** where to contact you
** on success
*** save the ssh key somewhere?
*** create the user on the irc box
**** adduser
**** send the public key
*** create the shoes-off config
*** start the session for the new shoes-off user

