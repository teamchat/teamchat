#! /bin/sh
### BEGIN INIT INFO
# Provides:          emacs
# Default-Start:     2 3 4 5
# Default-Stop:      S 0 1 6
# Description:       This file should be placed in /etc/init.d.
### END INIT INFO

USERNAME=emacs
DESC="Run the emacs daemon."
NAME=emacs
USERHOME=/home/$USERNAME
HOMEDIR=$USERHOME/emacs
DAEMON=$HOMEDIR/bin/$NAME
DAEMONNAME=server
DAEMON_ARGS="--daemon=$DAEMONNAME"
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME
VERBOSE="no"

EMACSUID=`awk -F: "\\$1 ~ /$USERNAME/ {print \\$3}" /etc/passwd`
EMACSCLIENT="sudo -u $USERNAME $HOMEDIR/bin/emacsclient -s /tmp/${USERNAME}${EMACSUID}/$DAEMONNAME"
EVALEXIT="(progn (setq kill-emacs-hook nil) (kill-emacs))"


# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
[ -f /etc/default/rcS ] && . /etc/default/rcS

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

do_install_me()
{
    cat <<EOF | sudo -u $USERNAME tee -a $USERHOME/.emacs.el
;;; init file

;; Probably need to add the local file archive
(setq package-archives
      '(("gnu" . "http://elpa.gnu.org/packages/")
        ("marmalade" . "http://marmalade-repo.org/packages/")))

;; Function used by initd package install
(defun package-let (package archive)
  "Install a package using the specified archive."
  (let ((package-archives
         (cons (cons "archive" archive)
               package-archives)))
    (package-refresh-contents)
    (package-install (if (stringp package)
                         (intern package)
                         package)))
  (package-refresh-contents))
;; End
EOF
}

#
# Function that starts the daemon/service
#
do_start()
{
    # Check for the properly intalled init file
    [ -f $USERHOME/.emacs.el ] || do_install_me

    # Return
    #   0 if daemon has been started
    #   1 if daemon was already running
    #   2 if daemon could not be started
    start-stop-daemon -u $USERNAME -c $USERNAME -d $USERHOME \
        --start --quiet \
        --exec $DAEMON \
        --test > /dev/null || return 1
    # Test directly with emacs
    $EMACSCLIENT -e '(emacs-pid)'  > /dev/null 2>&1
    [ $? -eq 0 ] && return 1

    # Start the deamon
    #
    # NOTE: you cannot use start-stop-daemon for this because
    # emacs ends up with a root-owned user-init-file
    sudo su -c "$DAEMON $DAEMON_ARGS" - $USERNAME
    ret=$?
    [ $ret -ne 0 ] && return 2
    return 0
}

#
# Function that stops the daemon/service
#
do_stop()
{
    $EMACSCLIENT --eval "$EVALEXIT"  > /dev/null 2>&1
    # Return
    #   0 if daemon has been stopped
    #   1 if daemon was already stopped
    #   2 if daemon could not be stopped
    #   other if a failure occurred
    [ -f $PIDFILE ] && start-stop-daemon --stop --quiet \
        --retry=TERM/30/KILL/5 \
        --pidfile $PIDFILE \
        --name $NAME
    RETVAL="$?"
    [ "$RETVAL" = 2 ] && return 2
    # Wait for children to finish too if this is a daemon that forks
    # and if the daemon is only ever run from this initscript.
    # If the above conditions are not satisfied then add some other code
    # that waits for the process to drop all resources that could be
    # needed by services started subsequently.  A last resort is to
    # sleep for some time.
    start-stop-daemon --stop --quiet --oknodo \
        --retry=0/30/KILL/5 \
        --exec $DAEMON
    [ "$?" = 2 ] && return 2
    # Many daemons don't delete their pidfiles when they exit.
    rm -f $PIDFILE
    return "$RETVAL"
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
    # If the daemon can reload its configuration without restarting
    # (for example, when it is sent a SIGHUP), then implement that
    # here.
    start-stop-daemon --stop --signal 1 --quiet \
        --pidfile $PIDFILE \
        --name $NAME
    return 0
}

do_status() {
    # Test the daemon with emacs
    $EMACSCLIENT -e '(emacs-pid)' > /dev/null
    return $?
}

do_eval() {
    # Test the daemon with emacs
    $EMACSCLIENT -e '(emacs-pid)' > /dev/null
    [ $? -ne 0 ] && return 1
    $EMACSCLIENT -e "$*"
}

do_install() {
    # Install a package from an archive
    # optionally supply the archive name
    $EMACSCLIENT -e '(emacs-pid)' > /dev/null
    [ $? -ne 0 ] && return 1
    if [ "$2" != "" ]
    then
        $EMACSCLIENT -e "(package-let (quote $1) \"$2\")"
    else
        $EMACSCLIENT -e "(package-install (quote $1))"
    fi
}

do_command() {
    # Test the daemon with emacs
    $EMACSCLIENT -e '(emacs-pid)' > /dev/null
    [ $? -ne 0 ] && return 1
    $EMACSCLIENT -e "($*)"
}

case "$1" in

    start)
        [ "$VERBOSE" != "no" ] && log_daemon_msg "Starting $DESC" "$NAME"
        do_start
        ret=$?
        [ $ret -eq 2 ] && log_end_msg 1
        exit 0
        ;;

    stop)
        [ "$VERBOSE" != "no" ] && log_daemon_msg "Stopping $DESC" "$NAME"
        do_stop
        case "$?" in
            0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
            2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
        esac
        ;;

    restart|force-reload)
        #
        # If the "reload" option is implemented then remove the
        # 'force-reload' alias
        #
        log_daemon_msg "Restarting $DESC" "$NAME"
        do_stop
        case "$?" in
            0|1)
                do_start
                case "$?" in
                    0) log_end_msg 0 ;;
                    1) log_end_msg 1 ;; # Old process is still running
                    *) log_end_msg 1 ;; # Failed to start
                esac
                ;;
            *)
                # Failed to stop
                log_end_msg 1
                ;;
        esac
        ;;

    status)
        do_status > /dev/null 2>&1
        ret=$?
        case "$ret" in
            0)
                echo "emacs is running"
                ;;
            *)
                echo "no emacs"
                ;;
        esac
        [ $ret -eq 0 ] || exit $ret
        ;;

    e|eval)
        shift
        do_eval $*
        ret=$?
        [ $ret -eq 0 ] || exit $ret
        ;;

    command)
        shift
        do_command $*
        ret=$?
        [ $ret -eq 0 ] || exit $ret
        ;;

    install|package-install)
        shift
        do_install $*
        ret=$?
        [ $ret -eq 0 ] || exit $ret
        ;;

    *)
        echo "Usage: $SCRIPTNAME {start|stop|restart|status|install|eval|force-reload}" >&2
        exit 3
        ;;
esac

# End
